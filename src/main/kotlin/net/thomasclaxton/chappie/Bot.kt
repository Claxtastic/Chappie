package net.thomasclaxton.chappie

import dev.kord.core.Kord
import dev.kord.core.event.message.MessageCreateEvent
import dev.kord.core.on
import net.thomasclaxton.chappie.commands.Ping
import net.thomasclaxton.chappie.commands.Play

val env: MutableMap<String, String> = System.getenv()

const val PREFIX = "?"

suspend fun main() {

  val client = Kord(env["chappieToken"]!!)

  banner()

  client.on<MessageCreateEvent> {
    with(message.content) {
      when {
        startsWith("$PREFIX${Play.name}") -> {
          Play.execute(client, message)
        }
        startsWith("$PREFIX${Ping.name}") -> {
          Ping.execute(client, message)
        }
      }
    }
  }

  client.login()
}

fun banner() {
  println("""
      ______   __                                      __           
     /      \ /  |                                    /  |          
    /${'$'}${'$'}${'$'}${'$'}${'$'}${'$'}  |${'$'}${'$'} |____    ______    ______    ______  ${'$'}${'$'}/   ______  
    ${'$'}${'$'} |  ${'$'}${'$'}/ ${'$'}${'$'}      \  /      \  /      \  /      \ /  | /      \ 
    ${'$'}${'$'} |      ${'$'}${'$'}${'$'}${'$'}${'$'}${'$'}${'$'}  | ${'$'}${'$'}${'$'}${'$'}${'$'}${'$'}  |/${'$'}${'$'}${'$'}${'$'}${'$'}${'$'}  |/${'$'}${'$'}${'$'}${'$'}${'$'}${'$'}  |${'$'}${'$'} |/${'$'}${'$'}${'$'}${'$'}${'$'}${'$'}  |
    ${'$'}${'$'} |   __ ${'$'}${'$'} |  ${'$'}${'$'} | /    ${'$'}${'$'} |${'$'}${'$'} |  ${'$'}${'$'} |${'$'}${'$'} |  ${'$'}${'$'} |${'$'}${'$'} |${'$'}${'$'}    ${'$'}${'$'} |
    ${'$'}${'$'} \__/  |${'$'}${'$'} |  ${'$'}${'$'} |/${'$'}${'$'}${'$'}${'$'}${'$'}${'$'}${'$'} |${'$'}${'$'} |__${'$'}${'$'} |${'$'}${'$'} |__${'$'}${'$'} |${'$'}${'$'} |${'$'}${'$'}${'$'}${'$'}${'$'}${'$'}${'$'}${'$'}/ 
    ${'$'}${'$'}    ${'$'}${'$'}/ ${'$'}${'$'} |  ${'$'}${'$'} |${'$'}${'$'}    ${'$'}${'$'} |${'$'}${'$'}    ${'$'}${'$'}/ ${'$'}${'$'}    ${'$'}${'$'}/ ${'$'}${'$'} |${'$'}${'$'}       |
     ${'$'}${'$'}${'$'}${'$'}${'$'}${'$'}/  ${'$'}${'$'}/   ${'$'}${'$'}/  ${'$'}${'$'}${'$'}${'$'}${'$'}${'$'}${'$'}/ ${'$'}${'$'}${'$'}${'$'}${'$'}${'$'}${'$'}/  ${'$'}${'$'}${'$'}${'$'}${'$'}${'$'}${'$'}/  ${'$'}${'$'}/  ${'$'}${'$'}${'$'}${'$'}${'$'}${'$'}${'$'}/ 
                                  ${'$'}${'$'} |      ${'$'}${'$'} |                    
                                  ${'$'}${'$'} |      ${'$'}${'$'} |                    
                                  ${'$'}${'$'}/       ${'$'}${'$'}/
  """.trimIndent())
}
